openapi: 3.0.0
info:
  title: Kwik-Ecommerce API
  description: API for Kwik-Ecommerce endpoints
  version: 1.0.0

servers:
  - url: http://localhost:9000
    description: Local development server
  - url: http://localhost:5002
    description: Local mocked server (backed by Mockoon)

paths:
  /products:
    get:
      summary: Get all products
      tags:
        - manager
        - product
      responses:
        '200':
          $ref: '#/components/responses/ProductCollection'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

    post:
      summary: Create a new product
      tags:
        - manager
        - product
      requestBody:
        description: Product details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductRepresentation'
      responses:
        '201':
          description: Product created successfully
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /products/{productId}:
    get:
      summary: Get product by ID
      tags:
        - manager
        - product
      parameters:
        - name: productId
          in: path
          description: ID of the product to retrieve
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/Product'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /products/{productId}/archive:
    post:
      summary: Archive a product
      tags:
        - manager
        - product
      parameters:
        - name: productId
          in: path
          description: ID of the product to archive
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Product archived successfully
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /products/{productId}/hide:
    post:
      summary: Hide a product
      tags:
        - manager
        - product
      parameters:
        - name: productId
          in: path
          description: ID of the product to hide
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Product hidden successfully
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /products/{productId}/show:
    post:
      summary: Show a product
      tags:
        - manager
        - product
      parameters:
        - name: productId
          in: path
          description: ID of the product to show
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Product shown successfully
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /customer/products:
    get:
      summary: Get products for customers
      tags:
        - customer
        - product
      responses:
        '200':
          $ref: '#/components/responses/ProductCollection'
        '500':
          $ref: '#/components/responses/ServerError'

components:
  schemas:
    ProductRepresentation:
      type: object
      properties:
        productId:
          type: string
        productState:
          $ref: '#/components/schemas/EnumeratedValueRepresentation'
        productName:
          type: string
        productDescription:
          type: string
        priceInBrl:
          type: number
          format: double
        imageUrl:
          type: string
      required:
        - productId
        - productState
        - productName
        - priceInBrl
        - imageUrl

    ProductCollectionRepresentation:
      type: object
      properties:
        products:
          type: array
          items:
            $ref: '#/components/schemas/ProductRepresentation'
      required:
        - products

    EnumeratedValueRepresentation:
      type: object
      properties:
        code:
          type: string
        defaultMessage:
          type: string
      required:
        - code
        - defaultMessage

    ErrorRepresentation:
      type: object
      properties:
        typeUri:
          type: string
        title:
          type: string
        failedValidations:
          type: array
          items:
            $ref: '#/components/schemas/FailedValidationRepresentation'
      required:
        - typeUri
        - title
        - failedValidations

    FailedValidationRepresentation:
      type: object
      properties:
        field:
          type: string
        reason:
          type: string
      required:
        - field
        - reason

  responses:
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorRepresentation'

    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorRepresentation'

    ServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorRepresentation'

    ProductCollection:
      description: Successful response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProductCollectionRepresentation'

    Product:
      description: Successful response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProductRepresentation'
